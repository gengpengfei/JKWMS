{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _defineProperty2 = require('babel-runtime/helpers/defineProperty');\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _react = require('react');\n\nvar React = _interopRequireWildcard(_react);\n\nvar _reactLifecyclesCompat = require('react-lifecycles-compat');\n\nvar _rcTooltip = require('rc-tooltip');\n\nvar _rcTooltip2 = _interopRequireDefault(_rcTooltip);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _placements = require('./placements');\n\nvar _placements2 = _interopRequireDefault(_placements);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj['default'] = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nvar splitObject = function splitObject(obj, keys) {\n  var picked = {};\n  var omitted = (0, _extends3['default'])({}, obj);\n  keys.forEach(function (key) {\n    if (obj && key in obj) {\n      picked[key] = obj[key];\n      delete omitted[key];\n    }\n  });\n  return {\n    picked: picked,\n    omitted: omitted\n  };\n};\n\nvar Tooltip = function (_React$Component) {\n  (0, _inherits3['default'])(Tooltip, _React$Component);\n\n  function Tooltip(props) {\n    (0, _classCallCheck3['default'])(this, Tooltip);\n\n    var _this = (0, _possibleConstructorReturn3['default'])(this, (Tooltip.__proto__ || Object.getPrototypeOf(Tooltip)).call(this, props));\n\n    _this.onVisibleChange = function (visible) {\n      var onVisibleChange = _this.props.onVisibleChange;\n\n      if (!('visible' in _this.props)) {\n        _this.setState({\n          visible: _this.isNoTitle() ? false : visible\n        });\n      }\n\n      if (onVisibleChange && !_this.isNoTitle()) {\n        onVisibleChange(visible);\n      }\n    }; // 动态设置动画点\n\n\n    _this.onPopupAlign = function (domNode, align) {\n      var placements = _this.getPlacements(); // 当前返回的位置\n\n\n      var placement = Object.keys(placements).filter(function (key) {\n        return placements[key].points[0] === align.points[0] && placements[key].points[1] === align.points[1];\n      })[0];\n\n      if (!placement) {\n        return;\n      } // 根据当前坐标设置动画点\n\n\n      var rect = domNode.getBoundingClientRect();\n      var transformOrigin = {\n        top: '50%',\n        left: '50%'\n      };\n\n      if (placement.indexOf('top') >= 0 || placement.indexOf('Bottom') >= 0) {\n        transformOrigin.top = rect.height - align.offset[1] + 'px';\n      } else if (placement.indexOf('Top') >= 0 || placement.indexOf('bottom') >= 0) {\n        transformOrigin.top = -align.offset[1] + 'px';\n      }\n\n      if (placement.indexOf('left') >= 0 || placement.indexOf('Right') >= 0) {\n        transformOrigin.left = rect.width - align.offset[0] + 'px';\n      } else if (placement.indexOf('right') >= 0 || placement.indexOf('Left') >= 0) {\n        transformOrigin.left = -align.offset[0] + 'px';\n      }\n\n      domNode.style.transformOrigin = transformOrigin.left + ' ' + transformOrigin.top;\n    };\n\n    _this.saveTooltip = function (node) {\n      _this.tooltip = node;\n    };\n\n    _this.state = {\n      visible: !!props.visible || !!props.defaultVisible\n    };\n    return _this;\n  }\n\n  (0, _createClass3['default'])(Tooltip, [{\n    key: 'getPopupDomNode',\n    value: function getPopupDomNode() {\n      return this.tooltip.getPopupDomNode();\n    }\n  }, {\n    key: 'getPlacements',\n    value: function getPlacements() {\n      var _props = this.props,\n          builtinPlacements = _props.builtinPlacements,\n          arrowPointAtCenter = _props.arrowPointAtCenter,\n          autoAdjustOverflow = _props.autoAdjustOverflow;\n      return builtinPlacements || (0, _placements2['default'])({\n        arrowPointAtCenter: arrowPointAtCenter,\n        verticalArrowShift: 8,\n        autoAdjustOverflow: autoAdjustOverflow\n      });\n    }\n  }, {\n    key: 'isHoverTrigger',\n    value: function isHoverTrigger() {\n      var trigger = this.props.trigger;\n\n      if (!trigger || trigger === 'hover') {\n        return true;\n      }\n\n      if (Array.isArray(trigger)) {\n        return trigger.indexOf('hover') >= 0;\n      }\n\n      return false;\n    } // Fix Tooltip won't hide at disabled button\n    // mouse events don't trigger at disabled button in Chrome\n    // https://github.com/react-component/tooltip/issues/18\n\n  }, {\n    key: 'getDisabledCompatibleChildren',\n    value: function getDisabledCompatibleChildren(element) {\n      if ((element.type.__ANT_BUTTON || element.type === 'button') && element.props.disabled && this.isHoverTrigger()) {\n        // Pick some layout related style properties up to span\n        // Prevent layout bugs like https://github.com/ant-design/ant-design/issues/5254\n        var _splitObject = splitObject(element.props.style, ['position', 'left', 'right', 'top', 'bottom', 'float', 'display', 'zIndex']),\n            picked = _splitObject.picked,\n            omitted = _splitObject.omitted;\n\n        var spanStyle = (0, _extends3['default'])({\n          display: 'inline-block'\n        }, picked, {\n          cursor: 'not-allowed'\n        });\n        var buttonStyle = (0, _extends3['default'])({}, omitted, {\n          pointerEvents: 'none'\n        });\n        var child = (0, _react.cloneElement)(element, {\n          style: buttonStyle,\n          className: null\n        });\n        return React.createElement('span', {\n          style: spanStyle,\n          className: element.props.className\n        }, child);\n      }\n\n      return element;\n    }\n  }, {\n    key: 'isNoTitle',\n    value: function isNoTitle() {\n      var _props2 = this.props,\n          title = _props2.title,\n          overlay = _props2.overlay;\n      return !title && !overlay; // overlay for old version compatibility\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var props = this.props,\n          state = this.state;\n      var prefixCls = props.prefixCls,\n          title = props.title,\n          overlay = props.overlay,\n          openClassName = props.openClassName,\n          getPopupContainer = props.getPopupContainer,\n          getTooltipContainer = props.getTooltipContainer;\n      var children = props.children;\n      var visible = state.visible; // Hide tooltip when there is no title\n\n      if (!('visible' in props) && this.isNoTitle()) {\n        visible = false;\n      }\n\n      var child = this.getDisabledCompatibleChildren(React.isValidElement(children) ? children : React.createElement('span', null, children));\n      var childProps = child.props;\n      var childCls = (0, _classnames2['default'])(childProps.className, (0, _defineProperty3['default'])({}, openClassName || prefixCls + '-open', true));\n      return React.createElement(_rcTooltip2['default'], (0, _extends3['default'])({}, this.props, {\n        getTooltipContainer: getPopupContainer || getTooltipContainer,\n        ref: this.saveTooltip,\n        builtinPlacements: this.getPlacements(),\n        overlay: overlay || title || '',\n        visible: visible,\n        onVisibleChange: this.onVisibleChange,\n        onPopupAlign: this.onPopupAlign\n      }), visible ? (0, _react.cloneElement)(child, {\n        className: childCls\n      }) : child);\n    }\n  }], [{\n    key: 'getDerivedStateFromProps',\n    value: function getDerivedStateFromProps(nextProps) {\n      if ('visible' in nextProps) {\n        return {\n          visible: nextProps.visible\n        };\n      }\n\n      return null;\n    }\n  }]);\n  return Tooltip;\n}(React.Component);\n\nTooltip.defaultProps = {\n  prefixCls: 'ant-tooltip',\n  placement: 'top',\n  transitionName: 'zoom-big-fast',\n  mouseEnterDelay: 0.1,\n  mouseLeaveDelay: 0.1,\n  arrowPointAtCenter: false,\n  autoAdjustOverflow: true\n};\n(0, _reactLifecyclesCompat.polyfill)(Tooltip);\nexports['default'] = Tooltip;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}