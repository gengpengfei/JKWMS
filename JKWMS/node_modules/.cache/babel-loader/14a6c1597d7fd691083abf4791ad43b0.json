{"ast":null,"code":"var CryptoJS = require(\"crypto-js\");\n\nexport var BASEURL = 'http://10.20.10.81:8877/';\nvar reqUrl = {\n  registUrl: BASEURL + '/Api/Register/addUser',\n  getGoodsCategoryList: BASEURL + '/api/ProductType/index'\n};\n\nfunction isArray(obj) {\n  return obj instanceof Array;\n}\n\nexport function NetWork_Post(net_api, bodyData, callback, netOptions, securityParam) {\n  if (isArray(securityParam)) {\n    var param = 'param';\n\n    for (var i = 0; i < securityParam.length; i++) {\n      var keyString = securityParam[i];\n\n      if (bodyData[keyString]) {\n        param = param + bodyData[keyString];\n      }\n    }\n\n    var md51 = CryptoJS.MD5(param).toString();\n    bodyData.keyStr = md51;\n  }\n\n  var opt_headers, opt_error;\n\n  if (typeof netOptions === 'object') {\n    opt_headers = netOptions['headers'];\n    opt_error = netOptions['error'];\n  }\n\n  ;\n  var post_header = opt_headers ? opt_headers : {\n    'Accept': 'application/json',\n    'Content-Type': 'application/x-www-form-urlencoded'\n  };\n  var post_error = opt_error ? opt_error : {\n    status: '1004',\n    msg: '网络延时，请稍后重试！'\n  };\n  var url = reqUrl[net_api];\n  var fetchOptions = {\n    method: 'POST',\n    headers: post_header,\n    body: JSON.stringify(bodyData)\n  };\n  fetch(url, fetchOptions).then(function (response) {\n    return response.text();\n  }).then(function (responseText) {\n    var responseData = JSON.parse(responseText);\n    callback(responseData); //回调\n  }).catch(function (error) {\n    console.log(error);\n    callback(post_error);\n  });\n}\nexport function NetWork_Get(net_api, callback, netOptions) {\n  var url = reqUrl[net_api];\n  var opt_error;\n\n  if (typeof netOptions === 'object') {\n    opt_error = netOptions['error'];\n  }\n\n  ;\n  var get_error = opt_error ? opt_error : {\n    status: '-1',\n    msg: '请求失败'\n  };\n  fetch(url, {\n    method: 'GET',\n    credentials: 'include'\n  }).then(function (response) {\n    return response.text();\n  }).then(function (responseText) {\n    var responseData = JSON.parse(responseText);\n    callback(responseData);\n  }).catch(function (error) {\n    callback(get_error);\n  });\n}\n;","map":{"version":3,"sources":["/Users/jk/Desktop/obj/jkwmsweb/src/network/netUtils.js"],"names":["CryptoJS","require","BASEURL","reqUrl","registUrl","getGoodsCategoryList","isArray","obj","Array","NetWork_Post","net_api","bodyData","callback","netOptions","securityParam","param","i","length","keyString","md51","MD5","toString","keyStr","opt_headers","opt_error","post_header","post_error","status","msg","url","fetchOptions","method","headers","body","JSON","stringify","fetch","then","response","text","responseText","responseData","parse","catch","error","console","log","NetWork_Get","get_error","credentials"],"mappings":"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","sourcesContent":["let CryptoJS = require(\"crypto-js\");\nexport const BASEURL = 'http://10.20.10.81:8877/';\nvar reqUrl = {\n    registUrl: BASEURL + '/Api/Register/addUser',\n    getGoodsCategoryList: BASEURL + '/api/ProductType/index',\n}\nfunction isArray(obj) {\n    return obj instanceof Array;\n}\n\nexport function NetWork_Post(net_api, bodyData, callback, netOptions, securityParam) {\n\n    if (isArray(securityParam)) {\n\n        let param = 'param';\n        for (var i = 0; i < securityParam.length; i++) {\n            let keyString = securityParam[i];\n            if (bodyData[keyString]) {\n                param = param + bodyData[keyString];\n            }\n\n        }\n\n        let md51 = CryptoJS.MD5(param).toString();\n        bodyData.keyStr = md51;\n    }\n\n\n    let opt_headers, opt_error;\n    if (typeof netOptions === 'object') {\n        opt_headers = netOptions['headers'];\n        opt_error = netOptions['error'];\n    };\n\n    let post_header = opt_headers ? opt_headers : {\n        'Accept': 'application/json',\n        'Content-Type': 'application/x-www-form-urlencoded',\n    };\n\n    let post_error = opt_error ? opt_error : {\n        status: '1004',\n        msg: '网络延时，请稍后重试！',\n    };\n\n    let url = reqUrl[net_api];\n    let fetchOptions = {\n        method: 'POST',\n        headers: post_header,\n        body: JSON.stringify(bodyData),\n    }\n\n    fetch(url, fetchOptions)\n        .then((response) => response.text())\n        .then((responseText) => {\n            let responseData = JSON.parse(responseText);\n            callback(responseData);//回调\n        })\n        .catch(error => {\n            console.log(error);\n            callback(post_error);\n        });\n\n}\n\nexport function NetWork_Get(net_api, callback, netOptions) {\n\n    let url = reqUrl[net_api];\n    let opt_error;\n\n    if (typeof netOptions === 'object') {\n        opt_error = netOptions['error'];\n    };\n\n    let get_error = opt_error ? opt_error : {\n        status: '-1',\n        msg: '请求失败',\n    };\n\n    fetch(url, {\n        method: 'GET',\n        credentials: 'include'\n    })\n        .then((response) => response.text())\n        .then((responseText) => {\n            let responseData = JSON.parse(responseText);\n            callback(responseData);\n        })\n        .catch((error) => {\n            callback(get_error);\n        });\n};"]},"metadata":{},"sourceType":"module"}