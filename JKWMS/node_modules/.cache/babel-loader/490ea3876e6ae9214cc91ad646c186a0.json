{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _defineProperty2 = require('babel-runtime/helpers/defineProperty');\n\nvar _defineProperty3 = _interopRequireDefault(_defineProperty2);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _propTypes = require('prop-types');\n\nvar PropTypes = _interopRequireWildcard(_propTypes);\n\nvar _react = require('react');\n\nvar React = _interopRequireWildcard(_react);\n\nvar _icon = require('../icon');\n\nvar _icon2 = _interopRequireDefault(_icon);\n\nvar _rcProgress = require('rc-progress');\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n\n    newObj['default'] = obj;\n    return newObj;\n  }\n}\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    'default': obj\n  };\n}\n\nvar __rest = undefined && undefined.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nvar statusColorMap = {\n  normal: '#108ee9',\n  exception: '#ff5500',\n  success: '#87d068'\n};\n\nvar validProgress = function validProgress(progress) {\n  if (!progress || progress < 0) {\n    return 0;\n  } else if (progress > 100) {\n    return 100;\n  }\n\n  return progress;\n};\n\nvar Progress = function (_React$Component) {\n  (0, _inherits3['default'])(Progress, _React$Component);\n\n  function Progress() {\n    (0, _classCallCheck3['default'])(this, Progress);\n    return (0, _possibleConstructorReturn3['default'])(this, (Progress.__proto__ || Object.getPrototypeOf(Progress)).apply(this, arguments));\n  }\n\n  (0, _createClass3['default'])(Progress, [{\n    key: 'render',\n    value: function render() {\n      var _classNames;\n\n      var props = this.props;\n\n      var prefixCls = props.prefixCls,\n          className = props.className,\n          _props$percent = props.percent,\n          percent = _props$percent === undefined ? 0 : _props$percent,\n          status = props.status,\n          format = props.format,\n          trailColor = props.trailColor,\n          size = props.size,\n          successPercent = props.successPercent,\n          type = props.type,\n          strokeWidth = props.strokeWidth,\n          width = props.width,\n          showInfo = props.showInfo,\n          _props$gapDegree = props.gapDegree,\n          gapDegree = _props$gapDegree === undefined ? 0 : _props$gapDegree,\n          gapPosition = props.gapPosition,\n          strokeColor = props.strokeColor,\n          _props$strokeLinecap = props.strokeLinecap,\n          strokeLinecap = _props$strokeLinecap === undefined ? 'round' : _props$strokeLinecap,\n          restProps = __rest(props, [\"prefixCls\", \"className\", \"percent\", \"status\", \"format\", \"trailColor\", \"size\", \"successPercent\", \"type\", \"strokeWidth\", \"width\", \"showInfo\", \"gapDegree\", \"gapPosition\", \"strokeColor\", \"strokeLinecap\"]);\n\n      var progressStatus = parseInt(successPercent ? successPercent.toString() : percent.toString(), 10) >= 100 && !('status' in props) ? 'success' : status || 'normal';\n      var progressInfo = void 0;\n      var progress = void 0;\n\n      var textFormatter = format || function (percentNumber) {\n        return percentNumber + '%';\n      };\n\n      if (showInfo) {\n        var text = void 0;\n        var iconType = type === 'circle' || type === 'dashboard' ? '' : '-circle';\n\n        if (format || progressStatus !== 'exception' && progressStatus !== 'success') {\n          text = textFormatter(validProgress(percent), validProgress(successPercent));\n        } else if (progressStatus === 'exception') {\n          text = React.createElement(_icon2['default'], {\n            type: 'close' + iconType,\n            theme: type === 'line' ? 'filled' : 'outlined'\n          });\n        } else if (progressStatus === 'success') {\n          text = React.createElement(_icon2['default'], {\n            type: 'check' + iconType,\n            theme: type === 'line' ? 'filled' : 'outlined'\n          });\n        }\n\n        progressInfo = React.createElement('span', {\n          className: prefixCls + '-text',\n          title: typeof text === 'string' ? text : undefined\n        }, text);\n      }\n\n      if (type === 'line') {\n        var percentStyle = {\n          width: validProgress(percent) + '%',\n          height: strokeWidth || (size === 'small' ? 6 : 8),\n          background: strokeColor,\n          borderRadius: strokeLinecap === 'square' ? 0 : '100px'\n        };\n        var successPercentStyle = {\n          width: validProgress(successPercent) + '%',\n          height: strokeWidth || (size === 'small' ? 6 : 8),\n          borderRadius: strokeLinecap === 'square' ? 0 : '100px'\n        };\n        var successSegment = successPercent !== undefined ? React.createElement('div', {\n          className: prefixCls + '-success-bg',\n          style: successPercentStyle\n        }) : null;\n        progress = React.createElement('div', null, React.createElement('div', {\n          className: prefixCls + '-outer'\n        }, React.createElement('div', {\n          className: prefixCls + '-inner'\n        }, React.createElement('div', {\n          className: prefixCls + '-bg',\n          style: percentStyle\n        }), successSegment)), progressInfo);\n      } else if (type === 'circle' || type === 'dashboard') {\n        var circleSize = width || 120;\n        var circleStyle = {\n          width: circleSize,\n          height: circleSize,\n          fontSize: circleSize * 0.15 + 6\n        };\n        var circleWidth = strokeWidth || 6;\n        var gapPos = gapPosition || type === 'dashboard' && 'bottom' || 'top';\n        var gapDeg = gapDegree || type === 'dashboard' && 75;\n        progress = React.createElement('div', {\n          className: prefixCls + '-inner',\n          style: circleStyle\n        }, React.createElement(_rcProgress.Circle, {\n          percent: validProgress(percent),\n          strokeWidth: circleWidth,\n          trailWidth: circleWidth,\n          strokeColor: strokeColor || statusColorMap[progressStatus],\n          strokeLinecap: strokeLinecap,\n          trailColor: trailColor,\n          prefixCls: prefixCls,\n          gapDegree: gapDeg,\n          gapPosition: gapPos\n        }), progressInfo);\n      }\n\n      var classString = (0, _classnames2['default'])(prefixCls, (_classNames = {}, (0, _defineProperty3['default'])(_classNames, prefixCls + '-' + (type === 'dashboard' && 'circle' || type), true), (0, _defineProperty3['default'])(_classNames, prefixCls + '-status-' + progressStatus, true), (0, _defineProperty3['default'])(_classNames, prefixCls + '-show-info', showInfo), (0, _defineProperty3['default'])(_classNames, prefixCls + '-' + size, size), _classNames), className);\n      return React.createElement('div', (0, _extends3['default'])({}, restProps, {\n        className: classString\n      }), progress);\n    }\n  }]);\n  return Progress;\n}(React.Component);\n\nexports['default'] = Progress;\nProgress.defaultProps = {\n  type: 'line',\n  percent: 0,\n  showInfo: true,\n  trailColor: '#f3f3f3',\n  prefixCls: 'ant-progress',\n  size: 'default'\n};\nProgress.propTypes = {\n  status: PropTypes.oneOf(['normal', 'exception', 'active', 'success']),\n  type: PropTypes.oneOf(['line', 'circle', 'dashboard']),\n  showInfo: PropTypes.bool,\n  percent: PropTypes.number,\n  width: PropTypes.number,\n  strokeWidth: PropTypes.number,\n  strokeLinecap: PropTypes.oneOf(['round', 'square']),\n  strokeColor: PropTypes.string,\n  trailColor: PropTypes.string,\n  format: PropTypes.func,\n  gapDegree: PropTypes.number,\n  'default': PropTypes.oneOf(['default', 'small'])\n};\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}