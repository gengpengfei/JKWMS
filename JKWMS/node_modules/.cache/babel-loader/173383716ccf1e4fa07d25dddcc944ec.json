{"ast":null,"code":"var CryptoJS = require(\"crypto-js\");\n\nexport var BASEURL = 'http://10.20.10.81:8877/';\nvar reqUrl = {\n  registUrl: BASEURL + '/Api/Register/addUser',\n  getGoodsCategoryList: BASEURL + '/api/ProductType/index'\n};\n\nfunction isArray(obj) {\n  return obj instanceof Array;\n}\n\nexport function NetWork_Post(net_api, bodyData, callback, netOptions, securityParam) {\n  var formData = new FormData();\n  var param = 'param';\n\n  for (var key in bodyData) {\n    formData.append(key, bodyData[key]);\n    param = param + bodyData[key];\n  }\n\n  var md51 = CryptoJS.MD5(param).toString();\n  formData.append(\"keyStr\", md51);\n  var opt_headers, opt_error;\n\n  if (typeof netOptions === 'object') {\n    opt_headers = netOptions['headers'];\n    opt_error = netOptions['error'];\n  }\n\n  ;\n  var post_header = opt_headers ? opt_headers : {\n    'Accept': 'application/json',\n    'Content-Type': 'application/x-www-form-urlencoded'\n  };\n  var post_error = opt_error ? opt_error : {\n    status: '1004',\n    msg: '网络延时，请稍后重试！'\n  };\n  console.log(formData.getAll());\n  var url = reqUrl[net_api];\n  var fetchOptions = {\n    method: 'POST',\n    headers: post_header,\n    body: formData\n  };\n  fetch(url, fetchOptions).then(function (response) {\n    return response.text();\n  }).then(function (responseText) {\n    var responseData = JSON.parse(responseText);\n    callback(responseData); //回调\n  }).catch(function (error) {\n    console.log(error);\n    callback(post_error);\n  });\n}\nexport function NetWork_Get(net_api, callback, netOptions) {\n  var url = reqUrl[net_api];\n  var opt_error;\n\n  if (typeof netOptions === 'object') {\n    opt_error = netOptions['error'];\n  }\n\n  ;\n  var get_error = opt_error ? opt_error : {\n    status: '-1',\n    msg: '请求失败'\n  };\n  fetch(url, {\n    method: 'GET',\n    credentials: 'include'\n  }).then(function (response) {\n    return response.text();\n  }).then(function (responseText) {\n    var responseData = JSON.parse(responseText);\n    callback(responseData);\n  }).catch(function (error) {\n    callback(get_error);\n  });\n}\n;","map":{"version":3,"sources":["/Users/jk/Desktop/obj/jkwmsweb/src/network/netUtils.js"],"names":["CryptoJS","require","BASEURL","reqUrl","registUrl","getGoodsCategoryList","isArray","obj","Array","NetWork_Post","net_api","bodyData","callback","netOptions","securityParam","formData","FormData","param","key","append","md51","MD5","toString","opt_headers","opt_error","post_header","post_error","status","msg","console","log","getAll","url","fetchOptions","method","headers","body","fetch","then","response","text","responseText","responseData","JSON","parse","catch","error","NetWork_Get","get_error","credentials"],"mappings":"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","sourcesContent":["let CryptoJS = require(\"crypto-js\");\nexport const BASEURL = 'http://10.20.10.81:8877/';\nvar reqUrl = {\n    registUrl: BASEURL + '/Api/Register/addUser',\n    getGoodsCategoryList: BASEURL + '/api/ProductType/index',\n}\nfunction isArray(obj) {\n    return obj instanceof Array;\n}\n\nexport function NetWork_Post(net_api, bodyData, callback, netOptions, securityParam) {\n    var formData = new FormData();\n    let param = 'param';\n    for (var key in bodyData) {\n        formData.append(key, bodyData[key])\n        param = param + bodyData[key];\n    }\n    let md51 = CryptoJS.MD5(param).toString();\n    formData.append(\"keyStr\", md51);\n    let opt_headers, opt_error;\n    if (typeof netOptions === 'object') {\n        opt_headers = netOptions['headers'];\n        opt_error = netOptions['error'];\n    };\n\n    let post_header = opt_headers ? opt_headers : {\n        'Accept': 'application/json',\n        'Content-Type': 'application/x-www-form-urlencoded',\n    };\n\n    let post_error = opt_error ? opt_error : {\n        status: '1004',\n        msg: '网络延时，请稍后重试！',\n    };\n    console.log(formData.getAll())\n    let url = reqUrl[net_api];\n    let fetchOptions = {\n        method: 'POST',\n        headers: post_header,\n        body: formData\n    }\n    fetch(url, fetchOptions)\n        .then((response) => response.text())\n        .then((responseText) => {\n            let responseData = JSON.parse(responseText);\n            callback(responseData);//回调\n        })\n        .catch(error => {\n            console.log(error);\n            callback(post_error);\n        });\n\n}\n\nexport function NetWork_Get(net_api, callback, netOptions) {\n\n    let url = reqUrl[net_api];\n    let opt_error;\n\n    if (typeof netOptions === 'object') {\n        opt_error = netOptions['error'];\n    };\n\n    let get_error = opt_error ? opt_error : {\n        status: '-1',\n        msg: '请求失败',\n    };\n\n    fetch(url, {\n        method: 'GET',\n        credentials: 'include'\n    })\n        .then((response) => response.text())\n        .then((responseText) => {\n            let responseData = JSON.parse(responseText);\n            callback(responseData);\n        })\n        .catch((error) => {\n            callback(get_error);\n        });\n};"]},"metadata":{},"sourceType":"module"}